[build-system]
requires = [
    "setuptools>=64",
    "setuptools_scm[toml]>=8",
    "wheel"
]
build-backend = "setuptools.build_meta"

[project]
name = "kiara_plugin.sample_plugin"
description = "sample-plugin"
authors = [
    {name = "Caro Appleby", email = "meow@example.com"}
]
readme = "README.md"
requires-python = ">=3.8"
keywords = ["kiara"]
license = {text = "MPL-2.0"}
classifiers = [
    "Programming Language :: Python :: 3",
    "Development Status :: 3 - Alpha",
    "License :: OSI Approved :: Mozilla Public License 2.0 (MPL 2.0)",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12"
]
dependencies = [
    "kiara>=0.5.9,<0.6.0",
    "kiara_plugin.core_types>=0.5.0,<0.6.0",
]
dynamic = ["version"]

[project.urls]
Homepage = "https://caro401.github.io/kiara_plugin.sample_plugin"
Documentation = "https://caro401.github.io/kiara_plugin.sample_plugin"
Repository = "https://github.com/caro401/kiara_plugin.sample_plugin"
Issues = "https://github.com/caro401/kiara_plugin.sample_plugin/issues"
Changelog = "https://github.com/caro401/kiara_plugin.sample_plugin/blob/main/CHANGELOG.md"

[project.optional-dependencies]
dev_testing = [
    "kiara[dev_testing]",
]
dev_utils = [
    "kiara[dev_utils]",
]

[project.entry-points."kiara.plugin"]
sample_plugin = "kiara_plugin.sample_plugin"

[project.entry-points."kiara.data_types"]
sample_plugin = "kiara_plugin.sample_plugin:find_data_types"

[project.entry-points."kiara.model_classes"]
sample_plugin = "kiara_plugin.sample_plugin:find_model_classes"

[project.entry-points."kiara.modules"]
sample_plugin = "kiara_plugin.sample_plugin:find_modules"

[project.entry-points."kiara.pipelines"]
sample_plugin = "kiara_plugin.sample_plugin:find_pipelines"

[options]
packages = { find = { where = "src", exclude = ["tests"] } }
include_package_data = true
package_dir = { "" = "src" }
zip_safe = false

[tool.aliases]
build = "bdist_wheel"
release = "build upload"

[tool.bdist_wheel]
universal = 0

[tool.setuptools_scm]
write_to = "src/kiara_plugin/sample_plugin/version.txt"

[tool.pytest.ini_options]
pythonpath = [
    "src"
]
addopts = "--verbose"
norecursedirs = [
    "dist",
    "build",
    ".tox"
]
testpaths = ["tests"]

[tool.coverage.run]
branch = true
source = ["kiara_plugin.sample_plugin"]
relative_files = true

[tool.coverage.paths]
source = [
    "src/",
    "*/site-packages/"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self\\.debug",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "if typing.TYPE_CHECKING:",
]

[tool.ruff]
line-length = 88
src = ["src", "tests"]
fix = true
target-version = "py311"

[tool.ruff.lint]
select = [
    "E",
    "F",
    "RUF",
    "I001",
    "YTT",
    "S",
    "C4",
    "T10",
    "ISC",
    "ICN",
    "T20",
    "Q",
    "TID",
    "PD",
    "PLC",
    "PLE",
    "PLR",
    "PLW",
    "PIE",
]
ignore = ["E501"]  # Don't be too fussy about line length

fixable = ["E", "F", "RUF100", "I001", "Q"]
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]
# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"
isort.known-first-party = ["kiara", "kiara_plugin"]
pydocstyle.convention = "google"

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py"=["S101"] # asserts allowed in tests...


[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
mypy_path = "src"
namespace_packages = false
plugins = [
    "pydantic.mypy"
]

# mypy per-module options:
[[tool.mypy.overrides]]
module = [
    "appdirs.*",
    "pyarrow.*",
    "ruamel.*"
]
ignore_missing_imports = true
