name: "linux tests and documentation builds for 'kiara_plugin.sample_plugin'"
# This workflow is triggered on pushes to the repository.
on: [push]

jobs:

  commitlint:
    name: lint commit message
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: wagoid/commitlint-github-action@v5

  test-linux:
    name: pytest on linux
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python_version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
    steps:
      - uses: actions/checkout@v4
      - name: "Set up Python ${{ matrix.python_version }}"
        uses: actions/setup-python@v5
        with:
          python-version: "${{ matrix.python_version }}"
      - name: install kiara_plugin.sample_plugin
        run: pip install --upgrade ."[dev_testing]"
      - name: display installed kiara and module package versions
        run: pip list | grep kiara
      - name: test with pytest
        run: coverage run -m pytest tests
      - name: Upload coverage data
        uses: actions/upload-artifact@v4
        with:
          name: "coverage-data-${{ matrix.python_version }}"
          path: .coverage
          if-no-files-found: ignore

  coverage:
    name: Combine & check coverage
    needs: test-linux
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: pip
      - run: pip install --upgrade coverage[toml]
      - uses: actions/download-artifact@v4
        with:
          pattern: coverage-data-*
          merge-multiple: true
      - name: Report coverage & fail if it's <80%.
        run: |
          coverage html --skip-covered --skip-empty
          coverage report --format=markdown >> $GITHUB_STEP_SUMMARY
          coverage report --fail-under=80
      - name: Upload HTML report if check failed.
        uses: actions/upload-artifact@v4
        with:
          name: html-report
          path: htmlcov
        if: ${{ failure() }}

  mypy-linux:
    name: mypy check on linux
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python_version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
    steps:
      - uses: actions/checkout@v4
      - name: "Set up Python ${{ matrix.python_version }}"
        uses: actions/setup-python@v5
        with:
          python-version: "${{ matrix.python_version }}"
          cache: pip
      - name: install kiara_plugin.sample_plugin
        run: pip install -U .[dev_testing]
      - name: Test with mypy
        run: make typecheck

  linting-linux:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: pip
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -U ruff
      - name: Run Ruff
        run: ruff --output-format=github src/

  build_python_package:
    name: build python package
    runs-on: ubuntu-latest
    needs:
      - test-linux
      - mypy-linux
      - linting-linux
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: pip
      - name: install pip
        run: pip install -U pip setuptools setuptools_scm build
      - name: create packages
        run: python -m build
      - name: upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-dists
          path: dist/

  release_python_package:
    name: publish python package to pypi
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
    runs-on: ubuntu-latest
    needs:
      - build_python_package
    permissions:
      id-token: write
    steps:
      - name: Retrieve build distributions
        uses: actions/download-artifact@v4
        with:
          name: build-dists
          path: dist/
      - name: publish to PyPI  # make sure you have pypi trusted publishing configured for this repo
        run: echo "push to pypi here, but not while testing actions!"
#        uses: pypa/gh-action-pypi-publish@release/v1


  generate_docs_data:
    name: Generate data for docs
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
    runs-on: ubuntu-latest
    permissions:
      contents: write
    needs:
      - release_python_package
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: "Set up Python 3.11"
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: pip
      - name: checkout main branch
        run: git checkout main
      - name: install plugin
        run: pip install -U .
      - name: Generate JSON file
        env:
          NO_COLOR: "true"  # required to disable rich control characters in non-terminal environment
        run: make TAG=${{github.ref_name}} gen-docs-data
      - name: do git things
        run: |
          git config --global user.email 'caro401@users.noreply.github.com'
          git config --global user.name "Github Actions"
          git add .
          git commit -m "Create docs data for version ${{github.ref_name}}"
          git push

  publish_docs:
    name: Publish docs to GitHub pages
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pages: write
      id-token: write
    needs:
      - generate_docs_data
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Checkout your repository using git
        uses: actions/checkout@v4
        with:
          ref: main  # not the tag that triggered the workflow, so you get the just-created new docs data
      - name: Install, build, and upload docs site
        uses: withastro/action@v2
        with:
            path: "./docs"
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
