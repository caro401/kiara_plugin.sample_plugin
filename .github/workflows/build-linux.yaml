name: "linux tests and documentation builds for 'kiara_plugin.sample_plugin'"
# This workflow is triggered on pushes to the repository.
on: [push]

jobs:

#  commitlint:
#    name: lint commit message
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v2
#        with:
#          fetch-depth: 0
#      - uses: wagoid/commitlint-github-action@v4

  test-linux:
    name: pytest on linux
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python_version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
    steps:
      - name: "Set up Python ${{ matrix.python_version }}"
        uses: actions/setup-python@v5
        with:
          python-version: "${{ matrix.python_version }}"
      - uses: actions/checkout@v4
      - name: install kiara_plugin.sample_plugin
        run: pip install -U .[dev_testing]
      - name: display installed kiara and module package versions
        run: pip list | grep kiara
      - name: test with pytest
        run: pytest --cov-report=xml --cov=kiara_plugin.sample_plugin tests
#      - name: Coveralls
#        uses: coverallsapp/github-action@v2
#        with:
#          parallel: true
#          flag-name: run ${{ join(matrix.*, ' - ') }}
#          format: cobertura
#          file: coverage.xml

#  coverage:
#    name: test coverage
#    runs-on: ubuntu-latest
#    needs:
#      - test-linux
#    steps:
#      - name: Coveralls Finished
#        uses: coverallsapp/github-action@v2
#        with:
#          parallel-finished: true

  mypy-linux:
    name: mypy check on linux
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python_version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
    steps:
      - name: "Set up Python ${{ matrix.python_version }}"
        uses: actions/setup-python@v5
        with:
          python-version: "${{ matrix.python_version }}"
      - uses: actions/checkout@v4
      - name: install kiara_plugin.sample_plugin
        run: pip install -U .[dev_testing]
      - name: Test with mypy
        run: make mypy

  linting-linux:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: pip cache
        id: pip-cache
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/setup.*') }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -U ruff
      # Include `--format=github` to enable automatic inline annotations.
      - name: Run Ruff
        run: ruff --output-format=github src/

  build_python_package:
    name: build python package
    runs-on: ubuntu-latest
    needs:
      - test-linux
      - mypy-linux
      - linting-linux
    steps:
      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: install pip
        run: pip install -U pip setuptools setuptools_scm build
      - name: create packages
        run: python -m build
      - name: upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-dists
          path: dist/

  release_python_package:
    name: publish python package to pypi
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
    runs-on: ubuntu-latest
    needs:
      - build_python_package
    permissions:
      id-token: write  # IMPORTANT: this permission is mandatory for trusted publishing
    steps:
      - name: Retrieve build distributions
        uses: actions/download-artifact@v4
        with:
          name: build-dists
          path: dist/
      - name: publish to PyPI  # make sure you have pypi trusted publishing configured for this repo
        run: echo "push to pypi here, but not while testing actions!"
#        uses: pypa/gh-action-pypi-publish@release/v1


  generate_docs_data:
    name: Generate data for docs
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
    runs-on: ubuntu-latest
    needs:
      - release_python_package
    steps:
      - uses: actions/checkout@v4
      - name: install plugin
        run: pip install -U .
      - name: checkout main branch
        run: git checkout main
      - name: Generate JSON file
        run: make TAG=${{github.ref_name}} gen-docs-data
      - run: git config --global user.email "github-actions@example.com"
      - run: git config --global user.name "Github Actions"
      - run: git commit -am "Create docs data for version ${{github.ref_name}}"
      - name: push new file to main branch
        run: git push https://${{ secrets.GITHUB_TOKEN }}@github.com/caro401/kiara_plugin.sample_plugin.git

  publish_docs:
    name: Publish docs to GitHub pages
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pages: write
      id-token: write
    needs:
      - generate_docs_data
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Checkout your repository using git
        uses: actions/checkout@v4
      - name: Install, build, and upload docs site
        uses: withastro/action@v2
        with:
            path: /docs # The root location of your Astro project inside the repository. (optional)
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
